AWSTemplateFormatVersion: '2010-09-09'
Description: Kafka

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tags. The metadata that you apply to the resources.
        Parameters:
          - App
          - Owner

Parameters:
  App:
    Type: String

  Owner:
    Type: String

  AvailabilityZonesCount:
    Description: Number of availability zones to span.
    Default: 3
    Type: Number
    AllowedValues: [ 1, 3 ]

  TaskExecutionRole:
    Description: >
      The Amazon Resource Name (ARN) of the task execution role
      that grants the Amazon ECS container agent permission
      to make AWS API calls on your behalf.
    Type: String

  VPC:
    Description: Choose existing VPC
    Type: AWS::EC2::VPC::Id

  PrivateSubnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  Cluster:
    Type: String

  CloudMap:
    Type: String

  CloudWatchLogsGroup:
    Type: String

  TemplatesBucket:
    Description: Specify ON-AWS S3 Bucket
    Type: String
    Default: on-aws-us-east-1-master

Conditions:
  SecondZone: !Or
    - !Equals [!Ref AvailabilityZonesCount, 2]
    - !Equals [!Ref AvailabilityZonesCount, 3]
  ThirdZone:
    !Equals [!Ref AvailabilityZonesCount, 3]

Resources:
  ServiceDiscoveryEntry1:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: '"kafka1" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 30
        RoutingPolicy: MULTIVALUE
      Name: kafka1
      NamespaceId: !Ref CloudMap

  ServiceDiscoveryEntry2:
    Type: AWS::ServiceDiscovery::Service
    Condition: SecondZone
    Properties:
      Description: '"kafka2" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 30
        RoutingPolicy: MULTIVALUE
      Name: kafka2
      NamespaceId: !Ref CloudMap

  ServiceDiscoveryEntry3:
    Type: AWS::ServiceDiscovery::Service
    Condition: ThirdZone
    Properties:
      Description: '"kafka3" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 30
        RoutingPolicy: MULTIVALUE
      Name: kafka3
      NamespaceId: !Ref CloudMap

  ################################################################################
  # Task Security
  ################################################################################
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for ECS Kafka Tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Owner
          Value: !Ref Owner

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: all traffic inside security group
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: kafka
          Essential: true
          Image: confluentinc/cp-kafka:6.1.0
          PortMappings:
            - ContainerPort: 9092
              HostPort: 9092
              Protocol: tcp
          Environment:
            - Name: KAFKA_ZOOKEEPER_CONNECT
              Value: !Sub zk1.${Cluster},zk2.${Cluster},zk3.${Cluster}
            - Name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              Value: PLAINTEXT:PLAINTEXT
          EntryPoint:
            - bash
            - -c
            - Fn::Sub:
              - |
                az=`cat $ECS_CONTAINER_METADATA_FILE | grep -oP '(?<="AvailabilityZone": ")[^"]*'`
                if [ $az == ${az1} ]; then export KAFKA_BROKER_ID="1" KAFKA_ADVERTISED_LISTENERS="PLAINTEXT://kafka1.${Cluster}:9092"; fi
                if [ $az == ${az2} ]; then export KAFKA_BROKER_ID="2" KAFKA_ADVERTISED_LISTENERS="PLAINTEXT://kafka2.${Cluster}:9092"; fi
                if [ $az == ${az3} ]; then export KAFKA_BROKER_ID="3" KAFKA_ADVERTISED_LISTENERS="PLAINTEXT://kafka3.${Cluster}:9092"; fi
                /etc/confluent/docker/run
              -
                az1: !Select [0, !GetAZs '']
                az2: !Select [1, !GetAZs '']
                az3: !Select [2, !GetAZs '']
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: on-aws
      Cpu: "256"
      ExecutionRoleArn: !Ref TaskExecutionRole
      Family: kafka
      Memory: "512"
      NetworkMode: awsvpc

  Service1:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Select [ 0, !Ref PrivateSubnets ]
          SecurityGroups:
            - !Ref SecurityGroup
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      PlacementConstraints:
        - Type: memberOf
          Expression:
            Fn::Sub:
              - attribute:ecs.subnet-id == ${subnet}
              -
                subnet: !Select [ 0, !Ref PrivateSubnets ]
      TaskDefinition: !Ref TaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryEntry1.Arn
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Owner
          Value: !Ref Owner

  Service2:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Select [ 1, !Ref PrivateSubnets ]
          SecurityGroups:
            - !Ref SecurityGroup
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      PlacementConstraints:
        - Type: memberOf
          Expression:
            Fn::Sub:
              - attribute:ecs.subnet-id == ${subnet}
              -
                subnet: !Select [ 1, !Ref PrivateSubnets ]
      TaskDefinition: !Ref TaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryEntry2.Arn
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Owner
          Value: !Ref Owner

  Service3:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Select [ 2, !Ref PrivateSubnets ]
          SecurityGroups:
            - !Ref SecurityGroup
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      PlacementConstraints:
        - Type: memberOf
          Expression:
            Fn::Sub:
              - attribute:ecs.subnet-id == ${subnet}
              -
                subnet: !Select [ 2, !Ref PrivateSubnets ]
      TaskDefinition: !Ref TaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryEntry3.Arn
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Owner
          Value: !Ref Owner
